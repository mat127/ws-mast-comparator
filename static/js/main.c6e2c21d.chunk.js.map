{"version":3,"sources":["Comparator.js","index.js"],"names":["mastData","forEach","m","year","Comparator","props","state","comparedMasts","selectedProfile","undefined","ComparatorHeader","comparator","this","ComparedMasts","masts","NotComparedMasts","mast","change","concat","isAnyCompared","setState","selectProfile","profile","filter","includes","length","stateChange","sort","m1","m2","compareToProfile","sortByName","compareMastName","dp","Math","abs","name","React","Component","colSpan","className","title","onClick","ComparatorFooter","colspan","style","renderNonEmpty","renderEmpty","removeAll","SortingHeader","sortByNameAscending","sortByNameDescending","getProfileColumns","columns","Array","getProfileClassName","map","MastRow","buttons","getComparedButtons","isCompared","getNotComparedButtons","remove","compare","size","ProfileDataColumns","calculateColumnValues","v","i","renderColumn","value","values","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c6e2c21d.chunk.js","sourcesContent":["import React from 'react'\nimport './Comparator.css';\n\nimport mastData from './mast/2019.json'\nmastData.forEach(m => m.year = 2019);\n\nclass Comparator extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      comparedMasts: [],\n      selectedProfile: undefined\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Windsurfing Mast Comparator</h1>\n        <table>\n          <ComparatorHeader comparator={this} />\n          <tbody>\n            <ComparedMasts masts={this.state.comparedMasts} comparator={this}/>\n            <ComparatorFooter comparator={this}/>\n            <SortingHeader comparator={this}/>\n            <NotComparedMasts comparator={this}/>\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n\n  compare(mast) {\n    let change = {\n      comparedMasts: this.state.comparedMasts.concat([mast])\n    };\n    if(this.isAnyCompared())\n      this.setState(change);\n    else\n      this.selectProfile(mast.profile, change);\n  }\n\n  remove(mast) {\n    let change = {\n      comparedMasts: this.state.comparedMasts.filter(m => m !==mast)\n    };\n    this.setState(change);\n  }\n\n  removeAll() {\n    this.setState({\n      comparedMasts: []\n    });\n  }\n\n  isCompared(mast) {\n    return this.state.comparedMasts.includes(mast);\n  }\n\n  isAnyCompared() {\n    return this.state.comparedMasts.length > 0;\n  }\n\n  selectProfile(profile, stateChange = {}) {\n    mastData.sort((m1,m2) => this.compareToProfile(m1,m2,profile));\n    stateChange.selectedProfile = profile;\n    this.setState(stateChange);\n  }\n\n  getProfileClassName(profile) {\n    if(profile === this.state.selectedProfile)\n      return \"selected-profile\";\n    else if(profile <= 5)\n      return \"hard-top\";\n    else if(profile <= 10)\n      return \"constant-curve\";\n    else\n      return \"flex-top\";\n  }\n\n  sortByName(sort) {\n    mastData.sort(sort);\n    this.setState({\n      selectedProfile: undefined\n    });\n  }\n\n  sortByNameDescending() {\n    this.sortByName((m1,m2) => -1*this.compareMastName(m1,m2));\n  }\n\n  sortByNameAscending() {\n    this.sortByName(this.compareMastName);\n  }\n\n  compareToMast(m1,m2,mast) {\n    if(m1 === mast)\n      return -1;\n    else if(m2 === mast)\n      return 1;\n    else\n      return this.compareToProfile(m1,m2,mast.profile);\n  }\n\n  compareToProfile(m1,m2,profile) {\n    const dp1 = Math.abs(m1.profile - profile);\n    const dp2 = Math.abs(m2.profile - profile);\n    const dp = dp1 - dp2;\n    if(dp === 0)\n      return this.compareMastName(m1,m2);\n    else\n      return dp;\n  }\n  \n  compareMastName(m1,m2) {\n    if(m1.name < m2.name)\n      return -1;\n    else if(m1.name > m2.name)\n      return 1;\n    else\n      return 0;\n  }\n};\n \nexport default Comparator\n  \nfunction ComparatorHeader(props) {\n  let comparator = props.comparator;\n  return (\n    <thead>\n      <tr>\n        <th>Producer</th>\n        <th>Year</th>\n        <th>Size</th>\n        <th>Length</th>\n        <th colSpan=\"5\" className=\"hard-top\">\n          <button\n            title=\"Sort hard top first\"\n            className=\"plain profile-group-header\"\n            onClick={() => comparator.selectProfile(3)}\n          >Hard top</button>\n        </th>\n        <th colSpan=\"5\" className=\"constant-curve\">\n          <button\n            title=\"Sort constant curve first\"\n            className=\"plain profile-group-header\"\n            onClick={() => comparator.selectProfile(8)}\n          >Constant curve</button>\n        </th>\n        <th colSpan=\"5\" className=\"flex-top\">\n          <button\n            title=\"Sort flex top first\"\n            className=\"plain profile-group-header\"\n            onClick={() => comparator.selectProfile(13)}\n          >Flex Top</button>\n        </th>\n      </tr>\n    </thead>\n  );\n}\n\nclass ComparatorFooter extends React.Component {\n\n  render() {\n    return (\n      <td\n        colspan=\"19\"\n        style={{'text-align': 'left'}}\n      >\n        { this.props.comparator.isAnyCompared() ?\n          this.renderNonEmpty() :\n          this.renderEmpty()\n        }\n      </td>\n    );\n  }\n\n  renderEmpty() {\n    return (\n      <span>Use the &#9878; icon next to a producer name to add the mast to the comparison.</span>\n    );\n  }\n\n  renderNonEmpty() {\n    return (\n      <button\n        className=\"plain hypertext\"\n        onClick={() => this.props.comparator.removeAll()}\n      >Remove all compared masts above.</button>\n    );\n  }\n};\n\nclass SortingHeader extends React.Component {\n  \n  render() {\n    let comparator = this.props.comparator;\n    return (\n      <tr>\n        <td className=\"header\">Producer\n          <button\n            title=\"Sort ascending by producer name\"\n            className=\"plain sort left-padded\"\n            onClick={() => comparator.sortByNameAscending()}\n          >&#x25b2;</button>\n          <button\n            title=\"Sort descending by producer name\"\n            className=\"plain sort\"\n            onClick={() => comparator.sortByNameDescending()}\n          >&#x25bc;</button>\n        </td>\n        <td className=\"header\">Year</td>\n        <td className=\"header\">Size</td>\n        <td className=\"header\">Length</td>\n        {this.getProfileColumns()}\n      </tr>\n    );\n  }\n\n  getProfileColumns() {\n    let comparator = this.props.comparator;\n    let columns = Array(15);\n    for(let profile = 1; profile <= columns.length; profile++) {\n      columns[profile-1] =\n        <td {...this.props} className={comparator.getProfileClassName(profile)}>\n          <button\n            title=\"Sort this profile first\"\n            className=\"plain sort\"\n            onClick={() => comparator.selectProfile(profile)}\n          >&#x25bc;</button>\n        </td>;\n    }\n    return columns;\n  }\n};\n\nfunction ComparedMasts(props) {\n  return props.masts\n    .map(m => <MastRow {...props} mast={m} buttons={getComparedButtons(m,props)}/>);\n}\n\nfunction NotComparedMasts(props) {\n  let comparator = props.comparator;\n  return mastData\n      .filter(m => !comparator.isCompared(m))\n      .map(m => <MastRow {...props} mast={m} buttons={getNotComparedButtons(m,props)}/>);\n}\n\nfunction getComparedButtons(mast,props) {\n  let comparator = props.comparator;\n  return [\n    <button\n      title=\"Remove from comparison\"\n      className=\"plain\"\n      onClick={() => comparator.remove(mast)}\n    >\n      &#x274C;\n    </button>\n  ];\n}\n\nfunction getNotComparedButtons(mast,props) {\n  let comparator = props.comparator;\n  return [\n    <button\n      title=\"Add to comparison\"\n      className=\"plain bigger\"\n      onClick={() => comparator.compare(mast)}\n    >\n      &#9878;\n    </button>\n  ];\n}\n\nfunction MastRow(props) {\n  return (\n    <tr>\n      <td className=\"mast-name\">\n        {props.buttons}\n        {props.mast.name}\n      </td>\n      <td>{props.mast.year}</td>\n      <td>{props.mast.size}</td>\n      <td>{props.mast.length}</td>\n      <ProfileDataColumns {...props}/>\n    </tr>\n  );\n}\n\nclass ProfileDataColumns extends React.Component {\n\n  render() {\n    const values = this.calculateColumnValues(this.props.mast['profile']);\n    return (\n      values.map((v,i) => this.renderColumn(i+1,v))\n    );\n  }\n\n  renderColumn(profile,value) {\n    let comparator = this.props.comparator;\n    return (\n      <td className={comparator.getProfileClassName(profile)}>\n        {value ? '✔' : ''}\n      </td>\n    );\n  }\n\n  calculateColumnValues(profile) {\n    var values = new Array(15);\n    for(let i=0; i < values.length; i++)\n      values[i] = (Math.abs(profile - (i + 1)) <= 1);\n    return values;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Comparator from './Comparator';\n\nReactDOM.render(\n    <Comparator />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}