{"version":3,"sources":["Comparator.js","index.js"],"names":["mastData","forEach","m","year","ProfileClass","min","max","className","this","profile","All","find","cls","includes","getClassOf","undefined","HardTop","ConstantCurve","FlexTop","Comparator","props","state","comparedMasts","highlightedProfile","ComparatorHeader","comparator","ComparedMasts","masts","NotComparedMasts","mast","change","concat","setState","filter","length","profileClass","sort","m1","m2","compareToProfile","isAnyCompared","forceUpdate","getClassNameOf","isHighlighted","sortByName","compareMastName","dp","Math","abs","name","React","Component","getClassName","isHighlightedClass","colSpan","title","onClick","sortProfileFirst","getTypical","ComparatorFooter","colspan","style","renderNonEmpty","renderEmpty","removeAll","SortingHeader","sortByNameAscending","sortByNameDescending","getProfileColumns","columns","Array","getProfileClassName","map","MastRow","buttons","remove","isCompared","compare","size","ProfileDataColumns","calculateColumnValues","v","i","renderColumn","value","renderClickableMark","values","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1296edd3.chunk.js","sourcesContent":["import React from 'react'\nimport './Comparator.css';\n\nimport mastData from './mast/2019.json'\nmastData.forEach(m => m.year = 2019);\n\nclass ProfileClass {\n  constructor(min,max,className) {\n    this.min = min;\n    this.max = max;\n    this.className = className;\n  }\n\n  includes(profile) {\n    return profile >= this.min && profile <= this.max;\n  }\n\n  getTypical() {\n    return (this.min + this.max)/2;\n  }\n\n  static HardTop = new ProfileClass(1,5,'hard-top');\n  static ConstantCurve = new ProfileClass(6,10,'constant-curve');\n  static FlexTop = new ProfileClass(11,15,'flex-top');\n\n  static All = [\n    this.HardTop,\n    this.ConstantCurve,\n    this.FlexTop\n  ];\n\n  static getClassOf(profile) {\n    return this.All.find(cls => cls.includes(profile));\n  }\n\n  static getClassNameOf(profile) {\n    let cls = this.getClassOf(profile);\n    return cls ? cls.className : undefined;\n  }\n}\n\nclass Comparator extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      comparedMasts: [],\n      highlightedProfile: undefined\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Windsurfing Mast Comparator</h1>\n        <table>\n          <ComparatorHeader comparator={this} />\n          <tbody>\n            <ComparedMasts masts={this.state.comparedMasts} comparator={this}/>\n            <ComparatorFooter comparator={this}/>\n            <SortingHeader comparator={this}/>\n            <NotComparedMasts comparator={this}/>\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n\n  compare(mast) {\n    let change = {\n      comparedMasts: this.state.comparedMasts.concat([mast])\n    };\n    change.highlightedProfile = change.comparedMasts[0].profile;\n    this.setState(change);\n  }\n\n  remove(mast) {\n    let change = {\n      comparedMasts: this.state.comparedMasts.filter(m => m !== mast)\n    };\n    change.highlightedProfile = change.comparedMasts.length > 0 ?\n      change.comparedMasts[0].profile :\n      undefined;\n    this.setState(change);\n  }\n\n  removeAll() {\n    this.setState({\n      comparedMasts: [],\n      highlightedProfile: undefined\n    });\n  }\n\n  isCompared(mast) {\n    return this.state.comparedMasts.includes(mast);\n  }\n\n  isAnyCompared() {\n    return this.state.comparedMasts.length > 0;\n  }\n\n  isHighlighted(profile) {\n    return this.state.highlightedProfile === profile;\n  }\n    \n  isHighlightedClass(profileClass) {\n    return profileClass.includes(this.state.highlightedProfile);\n  }\n    \n  sortProfileFirst(profile) {\n    mastData.sort((m1,m2) => this.compareToProfile(m1,m2,profile));\n    if(this.isAnyCompared())\n      this.forceUpdate();\n    else\n      this.setState({\n        highlightedProfile: profile\n      });\n  }\n\n  getProfileClassName(profile) {\n    let className = ProfileClass.getClassNameOf(profile);\n    if(this.isHighlighted(profile))\n      className += \" highlighted\";\n    return className;\n  }\n\n  sortByName(sort) {\n    mastData.sort(sort);\n    if(this.isAnyCompared())\n      this.forceUpdate();\n    else\n      this.setState({\n        highlightedProfile: undefined\n      });\n  }\n\n  sortByNameDescending() {\n    this.sortByName((m1,m2) => -1*this.compareMastName(m1,m2));\n  }\n\n  sortByNameAscending() {\n    this.sortByName(this.compareMastName);\n  }\n\n  compareToMast(m1,m2,mast) {\n    if(m1 === mast)\n      return -1;\n    else if(m2 === mast)\n      return 1;\n    else\n      return this.compareToProfile(m1,m2,mast.profile);\n  }\n\n  compareToProfile(m1,m2,profile) {\n    const dp1 = Math.abs(m1.profile - profile);\n    const dp2 = Math.abs(m2.profile - profile);\n    const dp = dp1 - dp2;\n    if(dp === 0)\n      return this.compareMastName(m1,m2);\n    else\n      return dp;\n  }\n  \n  compareMastName(m1,m2) {\n    if(m1.name < m2.name)\n      return -1;\n    else if(m1.name > m2.name)\n      return 1;\n    else\n      return 0;\n  }\n};\n \nexport default Comparator\n\nfunction ComparatorHeader(props) {\n  let comparator = props.comparator;\n  let getClassName = (profileClass) => {\n    let className = profileClass.className;\n    if(comparator.isHighlightedClass(profileClass))\n      className += \" highlighted\";\n    return className;\n  };\n  return (\n    <thead>\n      <tr>\n        <th>Producer</th>\n        <th>Year</th>\n        <th>Size</th>\n        <th>Length</th>\n        <th colSpan=\"5\" className={getClassName(ProfileClass.HardTop)}>\n          <span\n            title=\"Sort hard top first\"\n            className=\"clickable\"\n            onClick={() => comparator.sortProfileFirst(ProfileClass.HardTop.getTypical())}\n          >Hard top</span>\n        </th>\n        <th colSpan=\"5\" className={getClassName(ProfileClass.ConstantCurve)}>\n          <span\n            title=\"Sort constant curve first\"\n            className=\"clickable\"\n            onClick={() => comparator.sortProfileFirst(ProfileClass.ConstantCurve.getTypical())}\n          >Constant curve</span>\n        </th>\n        <th colSpan=\"5\" className={getClassName(ProfileClass.FlexTop)}>\n          <span\n            title=\"Sort flex top first\"\n            className=\"clickable\"\n            onClick={() => comparator.sortProfileFirst(ProfileClass.FlexTop.getTypical())}\n          >Flex Top</span>\n        </th>\n      </tr>\n    </thead>\n  );\n}\n\nclass ComparatorFooter extends React.Component {\n\n  render() {\n    return (\n      <td\n        colspan=\"19\"\n        style={{'text-align': 'left'}}\n      >\n        { this.props.comparator.isAnyCompared() ?\n          this.renderNonEmpty() :\n          this.renderEmpty()\n        }\n      </td>\n    );\n  }\n\n  renderEmpty() {\n    return (\n      <span>Use the ✚ icon next to a producer name to add the mast to the comparison.</span>\n    );\n  }\n\n  renderNonEmpty() {\n    return (\n      <button \n        onClick={() => this.props.comparator.removeAll()}\n      >Remove all compared masts above.</button>\n    );\n  }\n};\n\nclass SortingHeader extends React.Component {\n  \n  render() {\n    let comparator = this.props.comparator;\n    return (\n      <tr>\n        <td className=\"header\">Producer\n          <span\n            title=\"Sort ascending by producer name\"\n            className=\"clickable left-padded\"\n            onClick={() => comparator.sortByNameAscending()}\n          >&#x25b2;</span>\n          <span\n            title=\"Sort descending by producer name\"\n            className=\"clickable\"\n            onClick={() => comparator.sortByNameDescending()}\n          >&#x25bc;</span>\n        </td>\n        <td className=\"header\">Year</td>\n        <td className=\"header\">Size</td>\n        <td className=\"header\">Length</td>\n        {this.getProfileColumns()}\n      </tr>\n    );\n  }\n\n  getProfileColumns() {\n    let comparator = this.props.comparator;\n    let columns = Array(15);\n    for(let profile = 1; profile <= columns.length; profile++) {\n      columns[profile-1] =\n        <td {...this.props} className={comparator.getProfileClassName(profile)}>\n          <span\n            title=\"Sort this profile first\"\n            className=\"clickable\"\n            onClick={() => comparator.sortProfileFirst(profile)}\n          >&#x25bc;</span>\n        </td>;\n    }\n    return columns;\n  }\n};\n\nfunction ComparedMasts(props) {\n  let comparator = props.comparator;\n  let buttons = (mast) => [\n    <span\n      title=\"Remove from comparison\"\n      className=\"clickable\"\n      onClick={() => comparator.remove(mast)}\n    >✖</span>\n  ];\n  return props.masts\n    .map(m => <MastRow {...props} mast={m} buttons={buttons(m)}/>);\n}\n\nfunction NotComparedMasts(props) {\n  let comparator = props.comparator;\n  let buttons =(mast) => [\n    <span\n      title=\"Add to comparison\"\n      className=\"clickable\"\n      onClick={() => comparator.compare(mast)}\n    >✚</span>\n  ];\n  return mastData\n      .filter(m => !comparator.isCompared(m))\n      .map(m => <MastRow {...props} mast={m} buttons={buttons(m)}/>);\n}\n\nfunction MastRow(props) {\n  return (\n    <tr>\n      <td className=\"mast-name\">\n        {props.buttons}\n        <span className=\"left-padded\">{props.mast.name}</span>\n      </td>\n      <td>{props.mast.year}</td>\n      <td>{props.mast.size}</td>\n      <td>{props.mast.length}</td>\n      <ProfileDataColumns {...props}/>\n    </tr>\n  );\n}\n\nclass ProfileDataColumns extends React.Component {\n\n  render() {\n    const values = this.calculateColumnValues(this.props.mast['profile']);\n    return (\n      values.map((v,i) => this.renderColumn(i+1,v))\n    );\n  }\n\n  renderColumn(profile,value) {\n    let comparator = this.props.comparator;\n    return (\n      <td className={comparator.getProfileClassName(profile)}>\n        {value ? this.renderClickableMark(() => comparator.sortProfileFirst(profile)) : ''}\n      </td>\n    );\n  }\n\n  renderClickableMark(onClick) {\n    return (\n      <span\n        className=\"clickable\"\n        onClick={onClick}\n      >●</span>\n    );\n  }\n\n  calculateColumnValues(profile) {\n    var values = new Array(15);\n    for(let i=0; i < values.length; i++)\n      values[i] = (Math.abs(profile - (i + 1)) <= 1);\n    return values;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Comparator from './Comparator';\n\nReactDOM.render(\n    <Comparator />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}