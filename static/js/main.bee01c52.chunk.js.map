{"version":3,"sources":["Filter.js","Comparator.js","index.js"],"names":["FilterState","source","this","diameter","SDM","RDM","mast","size","Filter","props","diameterChanged","bind","state","id","className","type","checked","onChange","htmlFor","event","filterState","target","React","Component","mastData","forEach","m","year","i","ProfileClass","min","max","profile","All","find","cls","includes","getClassOf","undefined","HardTop","ConstantCurve","FlexTop","Comparator","comparedMasts","highlightedProfile","filter","c","filterChanged","ComparatorHeader","comparator","ComparedMasts","masts","NotComparedMasts","change","setState","concat","length","profileClass","sort","m1","m2","compareToProfile","isAnyCompared","forceUpdate","getClassNameOf","isHighlighted","sortByName","compareMastName","dp","Math","abs","name","getClassName","isHighlightedClass","colSpan","title","onClick","sortProfileFirst","getTypical","ComparatorFooter","style","textAlign","renderNonEmpty","renderEmpty","removeAll","SortingHeader","sortByNameAscending","sortByNameDescending","getProfileColumns","columns","Array","key","getProfileClassName","map","MastRow","buttons","remove","isCompared","compare","ProfileDataColumns","calculateColumnValues","v","renderColumn","value","renderClickableMark","values","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bee01c52.chunk.js","sourcesContent":["import React from 'react'\nimport './Filter.css';\n\nexport class FilterState {\n\n  constructor(source) {\n    if(source) {\n      this.diameter = {\n        SDM: source.diameter.SDM,\n        RDM: source.diameter.RDM\n      };\n    }\n    else {\n      this.diameter = {\n        SDM: true,\n        RDM: true\n      };\n    }\n  }\n\n  filter(mast) {\n    return this.diameter[mast.size];\n  }\n}\n\nexport default class Filter extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.diameterChanged = this.diameterChanged.bind(this);\n  }\n    \n  render() {\n    const state = this.props.state;\n    return (\n      <div id=\"filter\">\n        <label className=\"group\">Size:</label>\n        <div className=\"block\">\n          <input type=\"checkbox\" id=\"SDM\"\n            checked={state.diameter.SDM}\n            onChange={this.diameterChanged}\n          />\n          <label htmlFor=\"SDM\">SDM</label>\n        </div>\n        <div className=\"block\">\n          <input type=\"checkbox\" id=\"RDM\"\n            checked={state.diameter.RDM}\n            onChange={this.diameterChanged}/>\n          <label htmlFor=\"RDM\">RDM</label>\n        </div>\n      </div>\n    );\n  }\n\n  diameterChanged(event) {\n    this.props.onChange(\n      filterState => filterState.diameter[event.target.id] = event.target.checked\n    );\n  }\n};\n","import React from 'react'\nimport Filter, { FilterState } from './Filter.js';\nimport './Comparator.css';\n\nimport mastData from './mast/2019.json'\nmastData.forEach(m => m.year = 2019);\nmastData.forEach((m,i) => m.id = m.year*1000 + i);\n\nclass ProfileClass {\n  constructor(min,max,className) {\n    this.min = min;\n    this.max = max;\n    this.className = className;\n  }\n\n  includes(profile) {\n    return profile >= this.min && profile <= this.max;\n  }\n\n  getTypical() {\n    return (this.min + this.max)/2;\n  }\n\n  static HardTop = new ProfileClass(1,5,'hard-top');\n  static ConstantCurve = new ProfileClass(6,10,'constant-curve');\n  static FlexTop = new ProfileClass(11,15,'flex-top');\n\n  static All = [\n    this.HardTop,\n    this.ConstantCurve,\n    this.FlexTop\n  ];\n\n  static getClassOf(profile) {\n    return this.All.find(cls => cls.includes(profile));\n  }\n\n  static getClassNameOf(profile) {\n    let cls = this.getClassOf(profile);\n    return cls ? cls.className : undefined;\n  }\n}\n\nexport default class Comparator extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      comparedMasts: [],\n      highlightedProfile: undefined,\n      filter: new FilterState()\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <Filter state={this.state.filter} onChange={c => this.filterChanged(c)}/>\n        <table>\n          <ComparatorHeader comparator={this} />\n          <tbody>\n            <ComparedMasts masts={this.state.comparedMasts} comparator={this}/>\n            <ComparatorFooter comparator={this}/>\n            <SortingHeader comparator={this}/>\n            <NotComparedMasts filter={m => this.state.filter.filter(m)} comparator={this}/>\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n\n  filterChanged(change) {\n    const filter = new FilterState(this.state.filter);\n    change(filter);\n    this.setState({filter: filter});\n  }\n\n  compare(mast) {\n    let change = {\n      comparedMasts: this.state.comparedMasts.concat([mast])\n    };\n    change.highlightedProfile = change.comparedMasts[0].profile;\n    this.setState(change);\n  }\n\n  remove(mast) {\n    let change = {\n      comparedMasts: this.state.comparedMasts.filter(m => m !== mast)\n    };\n    change.highlightedProfile = change.comparedMasts.length > 0 ?\n      change.comparedMasts[0].profile :\n      undefined;\n    this.setState(change);\n  }\n\n  removeAll() {\n    this.setState({\n      comparedMasts: [],\n      highlightedProfile: undefined\n    });\n  }\n\n  isCompared(mast) {\n    return this.state.comparedMasts.includes(mast);\n  }\n\n  isAnyCompared() {\n    return this.state.comparedMasts.length > 0;\n  }\n\n  isHighlighted(profile) {\n    return this.state.highlightedProfile === profile;\n  }\n    \n  isHighlightedClass(profileClass) {\n    return profileClass.includes(this.state.highlightedProfile);\n  }\n    \n  sortProfileFirst(profile) {\n    mastData.sort((m1,m2) => this.compareToProfile(m1,m2,profile));\n    if(this.isAnyCompared())\n      this.forceUpdate();\n    else\n      this.setState({\n        highlightedProfile: profile\n      });\n  }\n\n  getProfileClassName(profile) {\n    let className = ProfileClass.getClassNameOf(profile);\n    if(this.isHighlighted(profile))\n      className += \" highlighted\";\n    return className;\n  }\n\n  sortByName(sort) {\n    mastData.sort(sort);\n    if(this.isAnyCompared())\n      this.forceUpdate();\n    else\n      this.setState({\n        highlightedProfile: undefined\n      });\n  }\n\n  sortByNameDescending() {\n    this.sortByName((m1,m2) => -1*this.compareMastName(m1,m2));\n  }\n\n  sortByNameAscending() {\n    this.sortByName(this.compareMastName);\n  }\n\n  compareToMast(m1,m2,mast) {\n    if(m1 === mast)\n      return -1;\n    else if(m2 === mast)\n      return 1;\n    else\n      return this.compareToProfile(m1,m2,mast.profile);\n  }\n\n  compareToProfile(m1,m2,profile) {\n    const dp1 = Math.abs(m1.profile - profile);\n    const dp2 = Math.abs(m2.profile - profile);\n    const dp = dp1 - dp2;\n    if(dp === 0)\n      return this.compareMastName(m1,m2);\n    else\n      return dp;\n  }\n  \n  compareMastName(m1,m2) {\n    if(m1.name < m2.name)\n      return -1;\n    else if(m1.name > m2.name)\n      return 1;\n    else\n      return 0;\n  }\n};\n \nfunction ComparatorHeader(props) {\n  let comparator = props.comparator;\n  let getClassName = (profileClass) => {\n    let className = profileClass.className;\n    if(comparator.isHighlightedClass(profileClass))\n      className += \" highlighted\";\n    return className;\n  };\n  return (\n    <thead>\n      <tr>\n        <th>Producer</th>\n        <th>Year</th>\n        <th>Size</th>\n        <th>Length</th>\n        <th colSpan=\"5\" className={getClassName(ProfileClass.HardTop)}>\n          <span\n            title=\"Sort hard top first\"\n            className=\"clickable\"\n            onClick={() => comparator.sortProfileFirst(ProfileClass.HardTop.getTypical())}\n          >Hard top</span>\n        </th>\n        <th colSpan=\"5\" className={getClassName(ProfileClass.ConstantCurve)}>\n          <span\n            title=\"Sort constant curve first\"\n            className=\"clickable\"\n            onClick={() => comparator.sortProfileFirst(ProfileClass.ConstantCurve.getTypical())}\n          >Constant curve</span>\n        </th>\n        <th colSpan=\"5\" className={getClassName(ProfileClass.FlexTop)}>\n          <span\n            title=\"Sort flex top first\"\n            className=\"clickable\"\n            onClick={() => comparator.sortProfileFirst(ProfileClass.FlexTop.getTypical())}\n          >Flex Top</span>\n        </th>\n      </tr>\n    </thead>\n  );\n}\n\nclass ComparatorFooter extends React.Component {\n\n  render() {\n    return (\n      <tr>\n        <td\n          colSpan=\"19\"\n          style={{textAlign: 'left'}}\n        >\n          { this.props.comparator.isAnyCompared() ?\n            this.renderNonEmpty() :\n            this.renderEmpty()\n          }\n        </td>\n      </tr>\n    );\n  }\n\n  renderEmpty() {\n    return (\n      <span>Use the ✚ icon next to a producer name to add the mast to the comparison.</span>\n    );\n  }\n\n  renderNonEmpty() {\n    return (\n      <button \n        onClick={() => this.props.comparator.removeAll()}\n      >Remove all compared masts above.</button>\n    );\n  }\n};\n\nclass SortingHeader extends React.Component {\n  \n  render() {\n    let comparator = this.props.comparator;\n    return (\n      <tr>\n        <td className=\"header\">Producer\n          <span\n            title=\"Sort ascending by producer name\"\n            className=\"clickable left-padded\"\n            onClick={() => comparator.sortByNameAscending()}\n          >&#x25b2;</span>\n          <span\n            title=\"Sort descending by producer name\"\n            className=\"clickable\"\n            onClick={() => comparator.sortByNameDescending()}\n          >&#x25bc;</span>\n        </td>\n        <td className=\"header\">Year</td>\n        <td className=\"header\">Size</td>\n        <td className=\"header\">Length</td>\n        {this.getProfileColumns()}\n      </tr>\n    );\n  }\n\n  getProfileColumns() {\n    let comparator = this.props.comparator;\n    let columns = Array(15);\n    for(let profile = 1; profile <= columns.length; profile++) {\n      columns[profile-1] =\n        <td {...this.props} key={profile} className={comparator.getProfileClassName(profile)}>\n          <span\n            title=\"Sort this profile first\"\n            className=\"clickable\"\n            onClick={() => comparator.sortProfileFirst(profile)}\n          >&#x25bc;</span>\n        </td>;\n    }\n    return columns;\n  }\n};\n\nfunction ComparedMasts(props) {\n  let comparator = props.comparator;\n  let buttons = (mast) => [\n    <span\n      title=\"Remove from comparison\"\n      className=\"clickable\"\n      key=\"remove\"\n      onClick={() => comparator.remove(mast)}\n    >✖</span>\n  ];\n  return props.masts\n    .map(m => <MastRow {...props} mast={m} buttons={buttons(m)} key={m.id}/>);\n}\n\nfunction NotComparedMasts(props) {\n  let comparator = props.comparator;\n  let buttons = (mast) => [\n    <span\n      title=\"Add to comparison\"\n      className=\"clickable\"\n      key=\"add\"\n      onClick={() => comparator.compare(mast)}\n    >✚</span>\n  ];\n  return mastData\n      .filter(m => !comparator.isCompared(m) && props.filter(m))\n      .map((m) => <MastRow {...props} mast={m} buttons={buttons(m)} key={m.id}/>);\n}\n\nfunction MastRow(props) {\n  return (\n    <tr>\n      <td className=\"mast-name\">\n        {props.buttons}\n        <span className=\"left-padded\">{props.mast.name}</span>\n      </td>\n      <td>{props.mast.year}</td>\n      <td>{props.mast.size}</td>\n      <td>{props.mast.length}</td>\n      <ProfileDataColumns {...props}/>\n    </tr>\n  );\n}\n\nclass ProfileDataColumns extends React.Component {\n\n  render() {\n    const values = this.calculateColumnValues(this.props.mast['profile']);\n    return (\n      values.map((v,i) => this.renderColumn(i+1,v))\n    );\n  }\n\n  renderColumn(profile,value) {\n    let comparator = this.props.comparator;\n    return (\n      <td className={comparator.getProfileClassName(profile)} key={profile}>\n        {value ? this.renderClickableMark(() => comparator.sortProfileFirst(profile)) : ''}\n      </td>\n    );\n  }\n\n  renderClickableMark(onClick) {\n    return (\n      <span\n        className=\"clickable\"\n        onClick={onClick}\n      >●</span>\n    );\n  }\n\n  calculateColumnValues(profile) {\n    var values = new Array(15);\n    for(let i=0; i < values.length; i++)\n      values[i] = (Math.abs(profile - (i + 1)) <= 1);\n    return values;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Comparator from './Comparator';\n\nReactDOM.render(\n    <Comparator />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}